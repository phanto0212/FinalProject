import React, { useState } from 'react';
import { Rate, Input, message, Avatar } from 'antd';
import {
  MessageOutlined,
  StarOutlined,
  LikeOutlined,
  ShareAltOutlined,
  UserOutlined,
  HeartOutlined,
  CommentOutlined
} from '@ant-design/icons';

import {
  CommentsContainer,
  CommentsSection,
  CommentStats,
  StatsItem,
  StatsNumber,
  AddCommentForm,
  FormHeader,
  UserAvatar,
  UserInfo,
  UserName,
  RatingInput,
  TextAreaWrapper,
  FormActions,
  SubmitButton,
  CancelButton,
  CommentsList,
  CommentItem,
  CommentHeader,
  CommentAvatar,
  CommentContent,
  CommentMeta,
  CommentAuthor,
  CommentRating,
  CommentDate,
  CommentText,
  CommentActions,
  ActionButton,
  LikeCount,
  ReplySection,
  Reply,
  ReplyHeader,
  ReplyAuthor,
  ReplyDate,
  ReplyText,
  EmptyComments,
  LoadMoreButton,
  ResponsiveWrapper
} from './style';

const { TextArea } = Input;

const CommentComponent = ({ recipeId }) => {
  const [newComment, setNewComment] = useState('');
  const [newRating, setNewRating] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [likedComments, setLikedComments] = useState(new Set());
  const [replyingTo, setReplyingTo] = useState(null);
  const [replyText, setReplyText] = useState('');

  // Sample data - replace with real API data
  const sampleComments = [
    {
      id: 1,
      author: 'Minh Anh',
      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b789?w=80&h=80&fit=crop&crop=face',
      rating: 5,
      date: '2 gi·ªù tr∆∞·ªõc',
      content: 'C√¥ng th·ª©c tuy·ªát v·ªùi! T√¥i ƒë√£ l√†m theo v√† m√≥n ph·ªü c√≥ h∆∞∆°ng v·ªã r·∫•t ƒë·∫≠m ƒë√†. N∆∞·ªõc d√πng trong v·∫Øt v√† th∆°m ngon. C·∫£ nh√† ƒë·ªÅu khen n·ª©c n·ªü. C·∫£m ∆°n chef ƒë√£ chia s·∫ª!',
      likes: 24,
      replies: [
        {
          id: 11,
          author: 'Chef Minh',
          avatar: 'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=80&h=80&fit=crop&crop=face',
          date: '1 gi·ªù tr∆∞·ªõc',
          content: 'C·∫£m ∆°n b·∫°n! R·∫•t vui khi c√¥ng th·ª©c gi√∫p √≠ch ƒë∆∞·ª£c cho gia ƒë√¨nh b·∫°n. Ch√∫c b·∫°n c√≥ nhi·ªÅu b·ªØa ƒÉn ngon mi·ªáng!'
        }
      ]
    },
    {
      id: 2,
      author: 'Ho√†ng Nam',
      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=80&h=80&fit=crop&crop=face',
      rating: 4,
      date: '5 gi·ªù tr∆∞·ªõc',
      content: 'L√†m theo c√¥ng th·ª©c n√†y nh∆∞ng t√¥i th·∫•y c·∫ßn th√™m gia v·ªã m·ªôt ch√∫t. C√≥ th·ªÉ l√† do kh·∫©u v·ªã gia ƒë√¨nh t√¥i ƒë·∫≠m ƒë√† h∆°n. Nh√¨n chung v·∫´n l√† m·ªôt c√¥ng th·ª©c r·∫•t hay!',
      likes: 18,
      replies: []
    },
    {
      id: 3,
      author: 'Thu H∆∞∆°ng',
      avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=80&h=80&fit=crop&crop=face',
      rating: 5,
      date: '1 ng√†y tr∆∞·ªõc',
      content: 'M√¨nh l√† ng∆∞·ªùi m·ªõi h·ªçc n·∫•u ƒÉn, l·∫ßn ƒë·∫ßu l√†m ph·ªü m√† th√†nh c√¥ng lu√¥n! H∆∞·ªõng d·∫´n r·∫•t chi ti·∫øt v√† d·ªÖ hi·ªÉu. C·∫£m ∆°n chef nhi·ªÅu l·∫Øm ·∫°!',
      likes: 32,
      replies: [
        {
          id: 31,
          author: 'Chef Minh',
          avatar: 'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=80&h=80&fit=crop&crop=face',
          date: '1 ng√†y tr∆∞·ªõc',
          content: 'Tuy·ªát v·ªùi! Ti·∫øp t·ª•c c·ªë g·∫Øng nh√©, n·∫•u ƒÉn l√† m·ªôt h√†nh tr√¨nh th√∫ v·ªã ƒë·∫•y!'
        }
      ]
    },
    {
      id: 4,
      author: 'ƒê·ª©c Anh',
      avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=80&h=80&fit=crop&crop=face',
      rating: 4,
      date: '2 ng√†y tr∆∞·ªõc',
      content: 'C√¥ng th·ª©c hay, nh∆∞ng theo kinh nghi·ªám c·ªßa m√¨nh th√¨ n√™n n∆∞·ªõng x∆∞∆°ng tr∆∞·ªõc khi ninh s·∫Ω th∆°m h∆°n. M·ªçi ng∆∞·ªùi th·ª≠ xem nh√©!',
      likes: 15,
      replies: []
    }
  ];

  const [comments, setComments] = useState(sampleComments);
  const currentUser = {
    name: 'B·∫°n',
    avatar: 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=80&h=80&fit=crop&crop=face'
  };

  // Calculate stats
  const totalComments = comments.reduce((total, comment) => total + 1 + comment.replies.length, 0);
  const averageRating = comments.length > 0 
    ? comments.reduce((sum, comment) => sum + comment.rating, 0) / comments.length 
    : 0;
  const totalLikes = comments.reduce((total, comment) => total + comment.likes, 0);

  // Handle comment submission
  const handleSubmitComment = async () => {
    if (!newComment.trim()) {
      message.warning('Vui l√≤ng nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n!');
      return;
    }

    if (newRating === 0) {
      message.warning('Vui l√≤ng ƒë√°nh gi√° c√¥ng th·ª©c!');
      return;
    }

    setIsSubmitting(true);

    try {
      // Simulate API call
      setTimeout(() => {
        const comment = {
          id: Date.now(),
          author: currentUser.name,
          avatar: currentUser.avatar,
          rating: newRating,
          date: 'V·ª´a xong',
          content: newComment,
          likes: 0,
          replies: []
        };

        setComments([comment, ...comments]);
        setNewComment('');
        setNewRating(0);
        setShowAddForm(false);
        setIsSubmitting(false);
        message.success('ƒê√£ th√™m b√¨nh lu·∫≠n th√†nh c√¥ng!');
      }, 1000);
    } catch (error) {
      setIsSubmitting(false);
      message.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!');
    }
  };

  // Handle like comment
  const handleLikeComment = (commentId) => {
    const newLikedComments = new Set(likedComments);
    
    if (likedComments.has(commentId)) {
      newLikedComments.delete(commentId);
      message.info('ƒê√£ b·ªè th√≠ch b√¨nh lu·∫≠n');
    } else {
      newLikedComments.add(commentId);
      message.success('ƒê√£ th√≠ch b√¨nh lu·∫≠n');
    }
    
    setLikedComments(newLikedComments);

    // Update like count in comments
    setComments(comments.map(comment => 
      comment.id === commentId 
        ? { 
            ...comment, 
            likes: likedComments.has(commentId) 
              ? comment.likes - 1 
              : comment.likes + 1 
          }
        : comment
    ));
  };

  // Handle reply to comment
  const handleReplyToComment = (commentId, authorName) => {
    setReplyingTo(commentId);
    setReplyText(`@${authorName} `);
  };

  // Handle submit reply
  const handleSubmitReply = async (commentId) => {
    if (!replyText.trim() || replyText.trim() === `@${comments.find(c => c.id === commentId)?.author} `) {
      message.warning('Vui l√≤ng nh·∫≠p n·ªôi dung tr·∫£ l·ªùi!');
      return;
    }

    try {
      const newReply = {
        id: Date.now(),
        author: currentUser.name,
        avatar: currentUser.avatar,
        date: 'V·ª´a xong',
        content: replyText
      };

      // Update comments with new reply
      setComments(comments.map(comment => 
        comment.id === commentId 
          ? { 
              ...comment, 
              replies: [...comment.replies, newReply]
            }
          : comment
      ));

      setReplyingTo(null);
      setReplyText('');
      message.success('ƒê√£ tr·∫£ l·ªùi b√¨nh lu·∫≠n!');
    } catch (error) {
      message.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!');
    }
  };

  // Cancel reply
  const handleCancelReply = () => {
    setReplyingTo(null);
    setReplyText('');
  };

  return (
    <ResponsiveWrapper>
      <CommentsContainer>
        <CommentsSection title={`üí¨ B√¨nh lu·∫≠n (${totalComments})`}>
          {/* Comment Stats */}
          <CommentStats>
            <StatsItem>
              <MessageOutlined />
              <span>T·ªïng b√¨nh lu·∫≠n:</span>
              <StatsNumber>{totalComments}</StatsNumber>
            </StatsItem>
            <StatsItem>
              <StarOutlined />
              <span>ƒê√°nh gi√° trung b√¨nh:</span>
              <StatsNumber>{averageRating.toFixed(1)}</StatsNumber>
              <Rate disabled value={averageRating} style={{ fontSize: '14px' }} />
            </StatsItem>
            <StatsItem>
              <HeartOutlined />
              <span>T·ªïng l∆∞·ª£t th√≠ch:</span>
              <StatsNumber>{totalLikes}</StatsNumber>
            </StatsItem>
          </CommentStats>

          {/* Add Comment Form */}
          {!showAddForm ? (
            <AddCommentForm>
              <div style={{ textAlign: 'center' }}>
                <SubmitButton 
                  onClick={() => setShowAddForm(true)}
                  icon={<CommentOutlined />}
                >
                  Th√™m b√¨nh lu·∫≠n c·ªßa b·∫°n
                </SubmitButton>
              </div>
            </AddCommentForm>
          ) : (
            <AddCommentForm>
              <FormHeader>
                <UserAvatar 
                  src={currentUser.avatar} 
                  size={45} 
                  icon={<UserOutlined />} 
                />
                <UserInfo>
                  <UserName>{currentUser.name}</UserName>
                  <RatingInput>
                    <span>ƒê√°nh gi√° c·ªßa b·∫°n:</span>
                    <Rate
                      value={newRating}
                      onChange={setNewRating}
                      style={{ 
                        color: '#ff8c00',
                        fontSize: '18px'
                      }}
                      character="‚òÖ"
                      allowHalf={false}
                    />
                  </RatingInput>
                </UserInfo>
              </FormHeader>

              <TextAreaWrapper>
                <TextArea
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ c√¥ng th·ª©c n√†y... (VD: M√≥n ƒÉn c√≥ v·ªã nh∆∞ th·∫ø n√†o? C√≥ kh√≥ l√†m kh√¥ng? B·∫°n c√≥ g·ª£i √Ω g√¨?)"
                  rows={4}
                  maxLength={1000}
                  showCount
                />
              </TextAreaWrapper>

              <FormActions>
                <CancelButton 
                  onClick={() => {
                    setShowAddForm(false);
                    setNewComment('');
                    setNewRating(0);
                  }}
                >
                  H·ªßy
                </CancelButton>
                <SubmitButton 
                  loading={isSubmitting}
                  onClick={handleSubmitComment}
                  icon={<MessageOutlined />}
                >
                  {isSubmitting ? 'ƒêang ƒëƒÉng...' : 'ƒêƒÉng b√¨nh lu·∫≠n'}
                </SubmitButton>
              </FormActions>
            </AddCommentForm>
          )}

          {/* Comments List */}
          {comments.length === 0 ? (
            <EmptyComments>
              <div className="empty-icon">üí¨</div>
              <h4>Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o</h4>
              <p>H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n chia s·∫ª tr·∫£i nghi·ªám v·ªÅ c√¥ng th·ª©c n√†y!</p>
            </EmptyComments>
          ) : (
            <CommentsList>
              {comments.map((comment, index) => (
                <CommentItem key={comment.id} index={index}>
                  <CommentHeader>
                    <CommentAvatar 
                      src={comment.avatar} 
                      size={45} 
                      icon={<UserOutlined />} 
                    />
                    <CommentContent>
                      <CommentMeta>
                        <CommentAuthor>{comment.author}</CommentAuthor>
                        <CommentRating>
                          <Rate 
                            disabled 
                            value={comment.rating} 
                            style={{ fontSize: '12px', color: '#ff8c00' }} 
                          />
                        </CommentRating>
                        <CommentDate>{comment.date}</CommentDate>
                      </CommentMeta>
                      
                      <CommentText>{comment.content}</CommentText>
                      
                      <CommentActions>
                        <ActionButton
                          className={likedComments.has(comment.id) ? 'liked' : ''}
                          onClick={() => handleLikeComment(comment.id)}
                        >
                          <LikeOutlined />
                          <span>Th√≠ch</span>
                          <LikeCount>({comment.likes})</LikeCount>
                        </ActionButton>
                        
                        <ActionButton
                          onClick={() => handleReplyToComment(comment.id, comment.author)}
                        >
                          <MessageOutlined />
                          <span>Tr·∫£ l·ªùi</span>
                        </ActionButton>
                        
                        <ActionButton>
                          <ShareAltOutlined />
                          <span>Chia s·∫ª</span>
                        </ActionButton>
                      </CommentActions>
                      
                      {/* Reply Form */}
                      {replyingTo === comment.id && (
                        <div style={{ marginTop: '15px', paddingLeft: '50px' }}>
                          <div style={{ 
                            background: 'rgba(45, 80, 22, 0.05)',
                            borderRadius: '12px',
                            padding: '15px',
                            border: '1px solid rgba(45, 80, 22, 0.1)'
                          }}>
                            <TextArea
                              value={replyText}
                              onChange={(e) => setReplyText(e.target.value)}
                              placeholder={`Tr·∫£ l·ªùi ${comment.author}...`}
                              rows={3}
                              style={{
                                border: '1px solid rgba(45, 80, 22, 0.2)',
                                borderRadius: '8px',
                                marginBottom: '10px'
                              }}
                            />
                            <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>
                              <CancelButton
                                size="small"
                                onClick={handleCancelReply}
                                style={{ height: '32px', padding: '0 15px' }}
                              >
                                H·ªßy
                              </CancelButton>
                              <SubmitButton
                                size="small"
                                onClick={() => handleSubmitReply(comment.id)}
                                style={{ height: '32px', padding: '0 15px' }}
                              >
                                Tr·∫£ l·ªùi
                              </SubmitButton>
                            </div>
                          </div>
                        </div>
                      )}
                    </CommentContent>
                  </CommentHeader>

                  {/* Replies */}
                  {(comment.replies.length > 0 || replyingTo === comment.id) && (
                    <ReplySection>
                      {comment.replies.map((reply) => (
                        <Reply key={reply.id}>
                          <ReplyHeader>
                            <Avatar 
                              src={reply.avatar} 
                              size={25} 
                              icon={<UserOutlined />} 
                            />
                            <ReplyAuthor>{reply.author}</ReplyAuthor>
                            <ReplyDate>{reply.date}</ReplyDate>
                          </ReplyHeader>
                          <ReplyText>{reply.content}</ReplyText>
                        </Reply>
                      ))}
                    </ReplySection>
                  )}
                </CommentItem>
              ))}
            </CommentsList>
          )}

          {/* Load More Button */}
          {comments.length > 0 && (
            <LoadMoreButton>
              Xem th√™m b√¨nh lu·∫≠n
            </LoadMoreButton>
          )}
        </CommentsSection>
      </CommentsContainer>
    </ResponsiveWrapper>
  );
};

export default CommentComponent;
