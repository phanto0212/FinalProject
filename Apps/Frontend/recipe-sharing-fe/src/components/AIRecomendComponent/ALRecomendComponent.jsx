import React, { useState, useRef, useEffect } from 'react';
import { Button, Input, Avatar, Spin } from 'antd';
import { 
  SendOutlined, 
  RobotOutlined, 
  UserOutlined, 
  BulbOutlined,
  ClockCircleOutlined,
  FireOutlined
} from '@ant-design/icons';
import {
  ChatContainer,
  ChatHeader,
  ChatBody,
  MessageContainer,
  MessageBubble,
  UserMessage,
  AIMessage,
  MessageTime,
  ChatInput,
  SendButton,
  InputContainer,
  SuggestionsContainer,
  SuggestionCard,
  LoadingMessage,
  AIAvatar,
  UserAvatar,
  RecipeCard,
  RecipeImage,
  RecipeContent,
  RecipeTitle,
  RecipeDesc,
  RecipeMeta,
  WelcomeMessage,
  QuickSuggestions,
  QuickButton
} from './style';

const AIRecommendComponent = () => {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  // Scroll to bottom khi c√≥ tin nh·∫Øn m·ªõi
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Kh·ªüi t·∫°o v·ªõi tin nh·∫Øn ch√†o m·ª´ng
  useEffect(() => {
    const welcomeMessage = {
      id: 1,
      type: 'ai',
      content: 'Xin ch√†o! T√¥i l√† AI Chef Assistant ü§ñüë®‚Äçüç≥\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ G·ª£i √Ω m√≥n ƒÉn d·ª±a tr√™n nguy√™n li·ªáu c√≥ s·∫µn\n‚Ä¢ T√¨m c√¥ng th·ª©c ph√π h·ª£p v·ªõi th·ªùi gian n·∫•u\n‚Ä¢ ƒê·ªÅ xu·∫•t m√≥n ƒÉn theo s·ªü th√≠ch\n‚Ä¢ T∆∞ v·∫•n thay th·∫ø nguy√™n li·ªáu\n\nH√£y cho t√¥i bi·∫øt b·∫°n mu·ªën n·∫•u m√≥n g√¨ h√¥m nay?',
      timestamp: new Date(),
      recipes: []
    };
    setMessages([welcomeMessage]);
  }, []);

  // G·ª£i √Ω nhanh
  const quickSuggestions = [
    { icon: 'üç≤', text: 'M√≥n ch√≠nh cho b·ªØa t·ªëi', query: 'G·ª£i √Ω m√≥n ch√≠nh cho b·ªØa t·ªëi gia ƒë√¨nh' },
    { icon: 'ü•ó', text: 'M√≥n ƒÉn healthy', query: 'M√≥n ƒÉn l√†nh m·∫°nh v√† √≠t calo' },
    { icon: '‚è∞', text: 'N·∫•u nhanh 30 ph√∫t', query: 'M√≥n ƒÉn n·∫•u nhanh trong 30 ph√∫t' },
    { icon: 'üå∂Ô∏è', text: 'M√≥n cay Vi·ªát Nam', query: 'M√≥n ƒÉn cay truy·ªÅn th·ªëng Vi·ªát Nam' }
  ];

  // Danh s√°ch c√¥ng th·ª©c m·∫´u cho AI response
  const sampleRecipes = [
    {
      id: 1,
      title: 'Ph·ªü B√≤ Truy·ªÅn Th·ªëng',
      description: 'M√≥n ph·ªü b√≤ ƒë·∫≠m ƒë√† v·ªõi n∆∞·ªõc d√πng ng·ªçt t·ª´ x∆∞∆°ng b√≤ ninh 6 ti·∫øng',
      image: 'https://images.unsplash.com/photo-1559847844-5315695dadae?w=150&h=100&fit=crop',
      time: '3 gi·ªù',
      difficulty: 'Kh√≥',
      ingredients: ['X∆∞∆°ng b√≤', 'B√°nh ph·ªü', 'Th·ªãt b√≤', 'H√†nh t√¢y', 'G·ª´ng']
    },
    {
      id: 2,
      title: 'Salad T√¥m B∆°',
      description: 'Salad t∆∞∆°i m√°t v·ªõi t√¥m lu·ªôc, b∆° ch√≠n v√† rau xanh',
      image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=150&h=100&fit=crop',
      time: '20 ph√∫t',
      difficulty: 'D·ªÖ',
      ingredients: ['T√¥m s√∫', 'B∆°', 'Rau x√† l√°ch', 'C√† chua cherry']
    },
    {
      id: 3,
      title: 'M√¨ X√†o Th·∫≠p C·∫©m',
      description: 'M√¨ x√†o gi√≤n v·ªõi t√¥m, th·ªãt v√† rau c·ªß ƒë·∫ßy m√†u s·∫Øc',
      image: 'https://images.unsplash.com/photo-1585032226651-759b368d7246?w=150&h=100&fit=crop',
      time: '25 ph√∫t',
      difficulty: 'Trung b√¨nh',
      ingredients: ['M√¨ t∆∞∆°i', 'T√¥m', 'Th·ªãt heo', 'Rau c·ªß', 'Gia v·ªã']
    }
  ];

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    // Gi·∫£ l·∫≠p AI response
    setTimeout(() => {
      const aiResponse = generateAIResponse(inputValue);
      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
    }, 2000);
  };

  // T·∫°o AI response gi·∫£ l·∫≠p
  const generateAIResponse = (userInput) => {
    const lowerInput = userInput.toLowerCase();
    let response = '';
    let suggestedRecipes = [];

    if (lowerInput.includes('ph·ªü') || lowerInput.includes('n∆∞·ªõc d√πng') || lowerInput.includes('b√≤')) {
      response = 'Tuy·ªát v·ªùi! Ph·ªü b√≤ l√† m√≥n ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam r·∫•t ƒë∆∞·ª£c y√™u th√≠ch. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë g·ª£i √Ω:';
      suggestedRecipes = [sampleRecipes[0]];
    } else if (lowerInput.includes('healthy') || lowerInput.includes('l√†nh m·∫°nh') || lowerInput.includes('salad') || lowerInput.includes('√≠t calo')) {
      response = 'M√≥n ƒÉn l√†nh m·∫°nh l√† l·ª±a ch·ªçn tuy·ªát v·ªùi! T√¥i g·ª£i √Ω nh·ªØng m√≥n n√†y:';
      suggestedRecipes = [sampleRecipes[1]];
    } else if (lowerInput.includes('nhanh') || lowerInput.includes('30 ph√∫t') || lowerInput.includes('ƒë∆°n gi·∫£n')) {
      response = 'M√≥n ƒÉn n·∫•u nhanh r·∫•t ti·ªán l·ª£i! ƒê√¢y l√† nh·ªØng g·ª£i √Ω ph√π h·ª£p:';
      suggestedRecipes = [sampleRecipes[2]];
    } else if (lowerInput.includes('t·ªëi') || lowerInput.includes('b·ªØa t·ªëi') || lowerInput.includes('gia ƒë√¨nh')) {
      response = 'B·ªØa t·ªëi gia ƒë√¨nh c·∫ßn m√≥n ƒÉn ƒë·∫ßy ƒë·ªß dinh d∆∞·ª°ng. T√¥i g·ª£i √Ω:';
      suggestedRecipes = [...sampleRecipes];
    } else {
      response = `C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi v·ªÅ "${userInput}"! D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë g·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p:`;
      suggestedRecipes = sampleRecipes.slice(0, 2);
    }

    return {
      id: Date.now() + 1,
      type: 'ai',
      content: response,
      timestamp: new Date(),
      recipes: suggestedRecipes
    };
  };

  // X·ª≠ l√Ω quick suggestion
  const handleQuickSuggestion = (suggestion) => {
    setInputValue(suggestion.query);
    handleSendMessage();
  };

  return (
    <ChatContainer>
      <ChatBody>
        {messages.length === 1 && (
          <WelcomeMessage>
            <QuickSuggestions>
              <h4 style={{ color: '#2d5016', marginBottom: '15px', textAlign: 'center' }}>
                üöÄ G·ª£i √Ω nhanh:
              </h4>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '10px' }}>
                {quickSuggestions.map((suggestion, index) => (
                  <QuickButton
                    key={index}
                    onClick={() => {
                      setInputValue(suggestion.query);
                      setTimeout(() => handleSendMessage(), 100);
                    }}
                  >
                    <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>{suggestion.icon}</span>
                    {suggestion.text}
                  </QuickButton>
                ))}
              </div>
            </QuickSuggestions>
          </WelcomeMessage>
        )}

        {messages.map((message) => (
          <MessageContainer key={message.id} $isUser={message.type === 'user'}>
            {message.type === 'user' ? (
              <UserMessage>
                <MessageBubble $isUser={true}>
                  {message.content}
                  <MessageTime>{message.timestamp.toLocaleTimeString()}</MessageTime>
                </MessageBubble>
                <UserAvatar size={40} icon={<UserOutlined />} />
              </UserMessage>
            ) : (
              <AIMessage>
                <AIAvatar size={40} icon={<RobotOutlined />} />
                <MessageBubble $isUser={false}>
                  {message.content}
                  <MessageTime>{message.timestamp.toLocaleTimeString()}</MessageTime>
                  
                  {message.recipes && message.recipes.length > 0 && (
                    <SuggestionsContainer>
                      {message.recipes.map((recipe) => (
                        <RecipeCard key={recipe.id}>
                          <RecipeImage src={recipe.image} alt={recipe.title} />
                          <RecipeContent>
                            <RecipeTitle>{recipe.title}</RecipeTitle>
                            <RecipeDesc>{recipe.description}</RecipeDesc>
                            <RecipeMeta>
                              <span><ClockCircleOutlined /> {recipe.time}</span>
                              <span><FireOutlined /> {recipe.difficulty}</span>
                            </RecipeMeta>
                            <div style={{ marginTop: '8px' }}>
                              <strong>Nguy√™n li·ªáu ch√≠nh:</strong>
                              <div style={{ fontSize: '0.85rem', color: '#666', marginTop: '4px' }}>
                                {recipe.ingredients.join(', ')}
                              </div>
                            </div>
                          </RecipeContent>
                        </RecipeCard>
                      ))}
                    </SuggestionsContainer>
                  )}
                </MessageBubble>
              </AIMessage>
            )}
          </MessageContainer>
        ))}

        {isLoading && (
          <MessageContainer $isUser={false}>
            <AIMessage>
              <AIAvatar size={40} icon={<RobotOutlined />} />
              <LoadingMessage>
                <Spin size="small" />
                <span style={{ marginLeft: '10px' }}>AI ƒëang suy nghƒ©...</span>
              </LoadingMessage>
            </AIMessage>
          </MessageContainer>
        )}

        <div ref={messagesEndRef} />
      </ChatBody>

      <ChatInput>
        <InputContainer>
          <Input.TextArea
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="H·ªèi t√¥i v·ªÅ m√≥n ƒÉn b·∫°n mu·ªën n·∫•u... (VD: T√¥i c√≥ th·ªãt b√≤ v√† rau, n·∫•u m√≥n g√¨ ngon?)"
            rows={3}
            style={{
              border: 'none',
              background: 'transparent',
              resize: 'none',
              fontSize: '16px',
              lineHeight: '1.5'
            }}
            onPressEnter={(e) => {
              if (!e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
              }
            }}
          />
          <SendButton
            type="primary"
            icon={<SendOutlined />}
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isLoading}
          />
        </InputContainer>
      </ChatInput>
    </ChatContainer>
  );
};

export default AIRecommendComponent;
