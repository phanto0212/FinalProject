import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Col } from 'antd';
import {
  HomePageContainer,
  HeroSection,
  HeroContent,
  HeroTitle,
  HeroSubtitle,
  CTAButton,
  FeaturesSection,
  SectionTitle,
  SectionSubtitle,
  FeatureGrid,
  FeatureCard,
  FeatureIcon,
  FeatureTitle,
  FeatureDescription,
  PopularSection,
  RecipeGrid,
  RecipeCard,
  RecipeImage,
  RecipeContent,
  RecipeTitle,
  RecipeDescription,
  RecipeMeta,
  StatsSection,
  StatsGrid,
  StatCard,
  StatNumber,
  StatLabel,
  ResponsiveCol
} from './style';

const HomePage = () => {
  const navigate = useNavigate();
  const [stats, setStats] = useState({ recipes: 0, users: 0, shares: 0 });
  const [isVisible, setIsVisible] = useState(false);

  // Animation counter for stats
  useEffect(() => {
    const timer = setTimeout(() => setIsVisible(true), 1000);
    return () => clearTimeout(timer);
  }, []);

  // Animated counter effect
  useEffect(() => {
    if (isVisible) {
      const duration = 2000; // 2 seconds
      const targetStats = { recipes: 1250, users: 8500, shares: 15000 };
      const increment = {
        recipes: targetStats.recipes / (duration / 50),
        users: targetStats.users / (duration / 50),
        shares: targetStats.shares / (duration / 50)
      };

      let current = { recipes: 0, users: 0, shares: 0 };
      const timer = setInterval(() => {
        current.recipes = Math.min(current.recipes + increment.recipes, targetStats.recipes);
        current.users = Math.min(current.users + increment.users, targetStats.users);
        current.shares = Math.min(current.shares + increment.shares, targetStats.shares);
        
        setStats({
          recipes: Math.floor(current.recipes),
          users: Math.floor(current.users),
          shares: Math.floor(current.shares)
        });

        if (
          current.recipes >= targetStats.recipes && 
          current.users >= targetStats.users && 
          current.shares >= targetStats.shares
        ) {
          clearInterval(timer);
        }
      }, 50);

      return () => clearInterval(timer);
    }
  }, [isVisible]);

  const features = [
    {
      icon: 'üîç',
      title: 'T√¨m C√¥ng Th·ª©c',
      description: 'Kh√°m ph√° h√†ng ng√†n c√¥ng th·ª©c t·ª´ kh·∫Øp n∆°i tr√™n th·∫ø gi·ªõi. T√¨m ki·∫øm theo nguy√™n li·ªáu, th·ªùi gian n·∫•u, ho·∫∑c lo·∫°i m√≥n ƒÉn.'
    },
    {
      icon: 'üìù',
      title: 'Chia S·∫ª C√¥ng Th·ª©c',
      description: 'Chia s·∫ª nh·ªØng m√≥n ƒÉn y√™u th√≠ch c·ªßa b·∫°n v·ªõi c·ªông ƒë·ªìng. T·∫°o c√¥ng th·ª©c ri√™ng v·ªõi h√¨nh ·∫£nh v√† h∆∞·ªõng d·∫´n chi ti·∫øt.'
    },
    {
      icon: 'ü§ñ',
      title: 'G·ª£i √ù AI',
      description: 'Nh·∫≠n g·ª£i √Ω th√¥ng minh t·ª´ AI d·ª±a tr√™n nguy√™n li·ªáu c√≥ s·∫µn. Kh√°m ph√° nh·ªØng k·∫øt h·ª£p m·ªõi l·∫° v√† ƒë·ªôc ƒë√°o.'
    },
    {
      icon: '‚ù§Ô∏è',
      title: 'Y√™u Th√≠ch',
      description: 'L∆∞u l·∫°i nh·ªØng c√¥ng th·ª©c ∆∞a th√≠ch ƒë·ªÉ n·∫•u l·∫°i sau. T·ªï ch·ª©c b·ªô s∆∞u t·∫≠p c√¥ng th·ª©c c√° nh√¢n c·ªßa ri√™ng b·∫°n.'
    },
    {
      icon: 'üë•',
      title: 'C·ªông ƒê·ªìng',
      description: 'K·∫øt n·ªëi v·ªõi nh·ªØng ng∆∞·ªùi ƒëam m√™ n·∫•u ƒÉn. ƒê√°nh gi√°, b√¨nh lu·∫≠n v√† h·ªçc h·ªèi t·ª´ nh·ªØng ƒë·∫ßu b·∫øp kh√°c.'
    },
    {
      icon: 'üì±',
      title: 'D·ªÖ S·ª≠ D·ª•ng',
      description: 'Giao di·ªán th√¢n thi·ªán, s·ª≠ d·ª•ng d·ªÖ d√†ng tr√™n m·ªçi thi·∫øt b·ªã. Truy c·∫≠p c√¥ng th·ª©c m·ªçi l√∫c, m·ªçi n∆°i.'
    }
  ];

  const popularRecipes = [
    {
      title: 'Ph·ªü B√≤ Truy·ªÅn Th·ªëng',
      description: 'C√¥ng th·ª©c ph·ªü b√≤ ƒë·∫≠m ƒë√† v·ªõi n∆∞·ªõc d√πng ƒë∆∞·ª£c ninh t·ª´ x∆∞∆°ng b√≤ trong 12 ti·∫øng.',
      time: '3 gi·ªù',
      difficulty: 'Trung b√¨nh',
      rating: '4.9'
    },
    {
      title: 'B√°nh M√¨ Vi·ªát Nam',
      description: 'B√°nh m√¨ gi√≤n tan v·ªõi nh√¢n th·ªãt, pate v√† rau s·ªëng t∆∞∆°i ngon.',
      time: '30 ph√∫t',
      difficulty: 'D·ªÖ',
      rating: '4.8'
    },
    {
      title: 'C∆°m T·∫•m S√†i G√≤n',
      description: 'C∆°m t·∫•m th∆°m ngon v·ªõi s∆∞·ªùn n∆∞·ªõng, ch·∫£ tr·ª©ng v√† n∆∞·ªõc m·∫Øm chua ng·ªçt.',
      time: '45 ph√∫t',
      difficulty: 'D·ªÖ',
      rating: '4.7'
    },
    {
      title: 'B√∫n B√≤ Hu·∫ø',
      description: 'M√≥n b√∫n ƒë·∫∑c s·∫£n Hu·∫ø v·ªõi n∆∞·ªõc d√πng cay n·ªìng v√† th·ªãt b√≤ t∆∞∆°i ngon.',
      time: '2 gi·ªù',
      difficulty: 'Kh√≥',
      rating: '4.9'
    }
  ];

  return (
    <HomePageContainer>
      {/* Hero Section */}
      <HeroSection>
        <HeroContent>
          <HeroTitle>Kh√°m Ph√° Th·∫ø Gi·ªõi ·∫®m Th·ª±c</HeroTitle>
          <HeroSubtitle>
            Chia s·∫ª c√¥ng th·ª©c, kh√°m ph√° h∆∞∆°ng v·ªã v√† k·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng ƒëam m√™ n·∫•u ƒÉn
          </HeroSubtitle>
          <CTAButton onClick={() => navigate('/recipes')}>
            B·∫Øt ƒê·∫ßu N·∫•u ƒÇn üç≥
          </CTAButton>
        </HeroContent>
      </HeroSection>

      {/* Features Section */}
      <FeaturesSection>
        <SectionTitle>T·∫°i Sao Ch·ªçn Recipe Sharing?</SectionTitle>
        <SectionSubtitle>
          N·ªÅn t·∫£ng chia s·∫ª c√¥ng th·ª©c h√†ng ƒë·∫ßu v·ªõi nh·ªØng t√≠nh nƒÉng ƒë·ªôc ƒë√°o v√† c·ªông ƒë·ªìng s√¥i ƒë·ªông
        </SectionSubtitle>
        
        <FeatureGrid gutter={[30, 30]} justify="center">
          {features.map((feature, index) => (
            <ResponsiveCol key={index} xs={24} sm={12} md={8} lg={8}>
              <FeatureCard>
                <FeatureIcon>{feature.icon}</FeatureIcon>
                <FeatureTitle>{feature.title}</FeatureTitle>
                <FeatureDescription>{feature.description}</FeatureDescription>
              </FeatureCard>
            </ResponsiveCol>
          ))}
        </FeatureGrid>
      </FeaturesSection>

      {/* Popular Recipes Section */}
      <PopularSection>
        <SectionTitle style={{ color: 'white' }}>C√¥ng Th·ª©c Ph·ªï Bi·∫øn</SectionTitle>
        <SectionSubtitle style={{ color: 'rgba(255, 255, 255, 0.8)' }}>
          Kh√°m ph√° nh·ªØng m√≥n ƒÉn ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t t·ª´ c·ªông ƒë·ªìng
        </SectionSubtitle>
        
        <RecipeGrid gutter={[30, 30]} justify="center">
          {popularRecipes.map((recipe, index) => (
            <ResponsiveCol key={index} xs={24} sm={12} md={6} lg={6}>
              <RecipeCard onClick={() => navigate('/recipes')}>
                <RecipeImage />
                <RecipeContent>
                  <RecipeTitle>{recipe.title}</RecipeTitle>
                  <RecipeDescription>{recipe.description}</RecipeDescription>
                  <RecipeMeta>
                    <span>‚è±Ô∏è {recipe.time}</span>
                    <span>‚≠ê {recipe.rating}</span>
                  </RecipeMeta>
                </RecipeContent>
              </RecipeCard>
            </ResponsiveCol>
          ))}
        </RecipeGrid>
      </PopularSection>

      {/* Stats Section */}
      <StatsSection>
        <SectionTitle>Con S·ªë ·∫§n T∆∞·ª£ng</SectionTitle>
        <SectionSubtitle>
          C·ªông ƒë·ªìng Recipe Sharing ƒëang ph√°t tri·ªÉn m·∫°nh m·∫Ω m·ªói ng√†y
        </SectionSubtitle>
        
        <StatsGrid gutter={[30, 30]} justify="center">
          <ResponsiveCol xs={24} sm={8} md={8}>
            <StatCard>
              <StatNumber>{stats.recipes.toLocaleString()}</StatNumber>
              <StatLabel>C√¥ng Th·ª©c</StatLabel>
            </StatCard>
          </ResponsiveCol>
          <ResponsiveCol xs={24} sm={8} md={8}>
            <StatCard>
              <StatNumber>{stats.users.toLocaleString()}</StatNumber>
              <StatLabel>Ng∆∞·ªùi D√πng</StatLabel>
            </StatCard>
          </ResponsiveCol>
          <ResponsiveCol xs={24} sm={8} md={8}>
            <StatCard>
              <StatNumber>{stats.shares.toLocaleString()}</StatNumber>
              <StatLabel>L∆∞·ª£t Chia S·∫ª</StatLabel>
            </StatCard>
          </ResponsiveCol>
        </StatsGrid>
      </StatsSection>
    </HomePageContainer>
  );
};

export default HomePage;
